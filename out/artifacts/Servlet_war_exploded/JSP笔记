JSP本质上就是一个Servlet
JSP的脚本：JSP定义Java代码的方式
    <%   代码   %>    ：定义的Java代码，在service方法中，service方法中可以定义什么，该脚本中就可以定义什么
    <%!  代码   %>    ：定义的Java代码，在jsp转换后的java类的成员类中
    <%=  代码   %>    ：定义的Java代码，会输出到页面上
JSP的内置对象（9个）：
    request
    response
    out：字符输出流对象，可以将数据输出到页面上

JSP:
    指令：用于配置JSP页面，导入资源文件
        格式：<%@ 指令名称 属性名1=属性值1 属性名2=属性值2 ... %>
        分类：
            page：配置JSP页面
                contentType：等同于response.setContentType()
                    设置响应体的mime类型以及字符集
                    设置当前jsp页面的编码（只能是高级的IDE才能生效，如果是低级工具，则需要设置pageEncoding属性设置当前页面的字符集）
                import：导包
                errorPage：当页面发生异常后，会自动跳转到1指定的错误页面
                isErrorPage：标识当前页面是否为错误页面
                    true：是，可以使用内置对象exception
                    false：否，默认值，不可以使用内置对象exception
            taglib：导入资源
                <%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
                prefix：前缀
            include：页面包含的

    注释：

    内置对象（9个）：在JSP页面中不需要创建，直接使用的对象
        pageContext(类型：PageContext)：当前页面共享数据，获取其他8个内置对象
        request(HttpServletRequest)：一次请求访问的多个资源（转发）
        session(HttpSession)：一次会话的多个请求间
        application(ServletContext)：所有用户共享数据
        response(HttpResponse)：响应对象
        page(Object)：当前页面(Servlet)的对象this
        out(JsoWriter)：输出对象，数据输出到页面上
        config(ServletConfig)：Servlet的配置对象
        exception(Throwable)：异常对象

MVC开发模式：
EL表达式：
    作用：替换和简化jsp页面中java代码的编写
    语法：${表达式}
    注意：JSP默认支持el表达式，如果要忽略el表达式
        设置jsp中page指令中：isELIgnored="true"，则忽略当前jsp页面中所有的el表达式
        \${表达式}：忽略当前这个el表达式
    使用：
        运算：
            运算符：
                算数运算符：+ - * /(div) %(mod)
                比较运算符：> < >= <= == !=
                逻辑运算符： &&(and) ||(or) !(not)
                空运算符：empty
                    ${empty 对象}：判断字符串、集合、数组对象是否为null，或者长度是否为0
                    ${not empty 对象}：判断字符串、集合、数组对象是否不为null，或者长度是否不为0
        获取值：
            el表达式只能从域对象中获取值
            语法：
                ${域名称.键名}：从指定域中获取指定键的值
                域名称：
                    pageScope -->pageContext
                    requestScope -->request
                    sessionScope -->session
                    applicationScope -->application(ServletContext)
                ${键名}：表示依次从最小的域中查找是否有该键对应的值，直到找到为止

                获取对象，List集合，Map集合的值
                    对象：${域名称.键名.属性名}：本质上会调用对象的getter方法
                    List集合：${域名称.键名[索引]}
                    Map集合：
                        ${域名称.键名.key名称}
                        ${域名称.键名["key名称"]}
        隐式对象（11个）：
            pageContext：
                获取JSP的其他8个对象
JSTL：
    常用的JSTL标签：
        if：相当于java代码的if语句
        choose：相当于java代码的if语句
        foreach：相当于java代码的if语句
            完成重复的操作
                属性：
                    begin：开始值
                    end：结束值
                    var：随机变量
                    step：步长

            遍历容器：
                属性：
                    items：容器对象
                    var：容器中元素的临时变量
                    varStatus：循环状态对象
                        index:容器中元素的索引，从0开始
                        count：循环次数，从1开始